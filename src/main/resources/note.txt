* 웹의 동작
  - 웹의 동작은 사용자가 어떤 정보를 받고 싶다고 서버애 요청을 하는 것이고,
    요청을 하면 서버는 해당 요청에 대한 처리를 진행한 후, 처리 결과를
    사용자에게 응답해 주는 것.
  - 결국 웹의 동작은 요청과 응답으로 이루어짐.

* 정적 웹 페이지와 동적 웹 페이지
  - 웹 서버는 개인화된 응답을 제공해야 함. 개인화된 응답에 대한 예를 든다면
    메일목록, 쇼핑몰에서 장바구니 안의 상품목록, 일기예보, 교통정보 등이
    개인화된 응답에 대한 예라고 할 수 있음. 또한 아주 짧은 시간 간격으로
    자주 바뀌는 정보들임.
  - 한 마디로 이야기를 한다면 정적인 페이지는 '고정된, 변하지 않는' 성격을
    가진 페이지를 말함. 예를 든다면 도서관에 있는 책을 브라우저를 통해서
    볼 수 있는데 이 때 보는 페이지는 책의 내용을 그대로 옮겨 놓은 정적인
    페이지임.
  - 이에 반해 동적인 페이지는 '자동으로 생성된' 페이지 라고 할 수 있음.
    자세히 설명을 한다면 사용자의 요청에 대해 결과물을 만들기 위해, 즉
    사용자가 보고자 하는 페이지를 만들기 위해서는 웹 서버가 요청을 받은
    뒤에 요청을 적절히 처리할 수 있는 웹 서버 프로그램에게로 요청을
    재전송하게 됨. 이렇게 요청이 웹 서버 프로그램에게 넘겨지면 그 요청을
    받은 프로그램을 필요한 결과물을 생성하게 되고 그 결과물을 웹 서버가
    다시 받아서 사용자에게 넘겨 주게 되는 것임.


* Servlet?
  - 정적인 웹 페이지의 문제점을 보완하여 나온 것이 동적인 웹 페이지를
    구현하는 JSP임. 하지만 사실 동적인 웹 페이지를 처음으로 구현한
    것은 JSP가 아님.

  - 초기에 동적인 웹 페이지를 구현한 것은 서블릿(Servlet) 이었음.
  - 서버 쪽에서 실행되면서 클라이언트의 요청에 따라 동적으로 서비스를
    제공하는 자바 클래스임.
  - 서블릿은 자바로 작성되어 있으므로 자바의 일반적인 특징을 모두 가지고 있음.
  - 서블릿은 서버에서 실행되다가 웹 브라우저에서 요청을 하면 해당 기능을
    수행한 후 웹 브라우저에게 결과를 전송함.
  - 서버에서 실행되기 때문에 보안과 관련된 기능도 훨씬 안전하게 수행이 가능함.

  ※ 서블릿의 특징.
     1. 서버쪽에서 실행되면서 기능을 수행함.
     2. 기존의 정적인 웹 프로그램의 문제점을 보완하여 동적인 여러 가지
        기능을 제공함.
     3. 스레드 방식으로 실행이 됨.
     4. 자바로 만들어져서 자바의 특징(객체 지향)을 가짐.
     5. 서블릿 컨테이너에서 실행됨.
     6. 컨테이너 종류에 상관없이 실행됨(플랫폼 독립적).
     7. 보안 기능을 적용하기 쉬움.
     8. 웹 브라우저에서 요청시 기능을 수행함.

  - 서버에서 만들어진 서블릿이 스스로 작동하는 것이 아니라, 서블릿을 관리해
    주는 것이 필요한데, 이러한 역할을 하는 것이 바로 서블릿 컨테이너임.
    즉, 서블릿을 '요구사항 명세서' 라고 표현한다면, 서블릿 컨테이너는
    그 명세서를 보고 개발하는 '개발자' 임.
    서블릿 컨테이너는 Client의 request(요청)를 받아주고, response(응답)
    할 수 있게, 웹 서버와 소켓을 만들어 통신을 함.
    대표적으로는 무료 서비스인 톰캣(Tomcat)이 있음.
    톰캣은 웹 서버와 소켓을 만들어 통신하며 JSP(Java Server Page)와
    Servlet이 작동할 수 있는 환경을 만들어 줌.

* Servlet Life Cycle(서블릿 생명주기)
  1. 브라우저에서 서블릿을 호출하면 WAS는 서블릿 클래스를 로딩함.
  2. 서블릿 클래스가 로딩이 되면 인스턴스가 생성이 되고, 약속된 서블릿
     Life Cycle로 init() 메서드가 자동적으로 호출이 됨.
     ==> 자바에서 main() 메서드가 호출이 되는 것처럼...
  3. 호출된 서블릿 인스턴스로부터 스레드를 생성하고 생성된 서블릿 클래스에
     있는 service() 메서드를 호출함.
  4. 작업을 완료 후, 서블릿 종료 시 destroy() 메서드를 호출함.

  * 서블릿에서 클라이언트의 요청을 얻는 방법
   * - HttpServletRequest 클래스에서 <form> 태그로 전송된
   *   데이터를 받아오는데 사용하는 메서드.
   *   * getParameter(String name)
   *     => <form> 태그의 name 속성에 들어간 변수명을
   *        받아서 사용을 함. 반환형은 String 타입임.
   *   * getParameterValues(String name)
   *     => 같은 name에 대하여 여러 개의 값을
   *        얻을 때 사용함. 반환형은 String[] 타입임.
   *
   * 서블릿에서 요청 받은 내용을 처리하여 클라이언트에 보내는 방법
   * 1. HttpServletResponse 클래스를 이용하여 응답을 함.
   * 2. doGet()이나 doPost() 메서드 안에서 처리함.
   * 3. javax.servlet.http.HttpServletResponse 객체를
   *    이용함.
   * 4. setContentType() 메서드를 이용하여 클라이언트에게 전송할
   *    데이터의 종류(MIME-TYPE)를 지정함.
   * 5. 클라이언트(웹 브라우저)와 서블릿의 틍신은 자바 I/O의 스트림을
   *    이용함.
   *
   *
   * 서블릿 생명 주기(Life Cycle)
   * Servlet 객체 생성 → init() 메서드 호출 → service(), doGet(), doPost() 메서드 호출 → destroy() 메서드 호출
   *   (최초 한 번)        (최초 한 번)                   (요청 시 매번)                    (마지막 한 번)
   *
   * - init() : 서블릿 요청 시 맨 처음 한 번만 호출됨.
   *            서블릿 생성 시 초기화 작업을 주로 진행을 함.
   * - doGet() / doPost() : 서블릿 요청 시 매번 호출됨.
   *                        실제로 클라이언트가 요청하는
   *                        작업을 수행함.
   * - destory() : 서블릿이 기능을 수행하고 메모리에서 소멸될
   *               때 호출이 됨. 서블릿의 마무리 작업을 주로
   *               수행을 함.
   * - 서버(서블릿)에서 웹 브라우저로 데이터를 전송할 때에는 어떤
   *   종류의 데이터를 전송하는지 웹 브라우저에게 알려 주어야 함.
   *   => 이유 : 웹 브라우저가 전송 받을 데이터의 종류를 미리 알고
   *            있으면 더 빠르게 처리할 수 있기 때문임.
   * - 데이터 종류(MIME-TYPE) : 톰캣 컨테이너에서 미리 제공하는
   *                         여러 가지 전송 데이터 종류를
   *                         하나 지정하여 웹 브라우저로
   *                         전송.
   *                         이처럼 톰캣 컨테이네에서 미리
   *                         설정해 놓은 데이터의 종류들을
   *                         말함. 웹 브라우저는 기본적으로
   *                         HTML만 인식하므로 서블릿에서
   *                         전송하는 대부분의 데이터는
   *                         MIME-TYPE을 "text/html"
   *                         로 설정을 함.
   * - 서블릿이 클라이언트(웹 브라우저)에 응답하는 과정.
   *   * setContentType()을 이용해서 MIME-TYPE을 지정함.
   *   * 데이터를 출력할 PrintWriter 객체를 생성함.
   *   * 출력 데이터를 HTML 형식으로 만듬.
   *   * PrintWriter 객체의 print()나 println() 메서드를
   *     이용해 데이터를 출력함.
   *
   *
   * 웹 브라우저에서 서블릿으로 데이터를 전송하는 전송 방식(2가지)
   * 1. get 방식
   *    - 서블릿에 데이터를 전송할 때는 데이터가 url 뒤에
   *      name=value 형태로 전송이 됨.
   *    - 여러 개의 데이터를 전송할 때는 '&'로 구분하여 전송이 됨.
   *    - 보안이 취약함.
   *    - 전송할 수 있는 데이터는 최대 255자.
   *    - 기본 전송 방식이고 사용이 쉬움.
   *    - 웹 브라우저에 직접 입력해서 전송할 수도 있음.
   *    - 서블릿에서는 doGet() 메서드에서 전송된 데이터를 처리함.
   *    - get 방식의 요청은 자료를 검색한다거나, 게시글의 상세정보를
   *      본다거나, 특정 상품의 정보를 조회하는 것과 같이 데이터를
   *      조회하는 경우에 적합함.
   *
   * 2. post 방식
   *    - 서블릿에 데이터를 전송할 때는 TCP/IP 프로토콜 데이터의
   *      head 영역에 숨겨진 채 전송이 됨.
   *    - 보안에 유리함.
   *    - 전송 데이터의 용량이 무제한임.
   *    - 처리 속도가 get 방식보다 느림.
   *    - 서블릿에서는 doPost() 메서드에서 전송된 데이터를 처리함.
   */